plugins {
  id "de.undercouch.download" version "3.4.3"
}

// This allows us to compile either groovy or java from the same set of directories
apply plugin: 'groovy'

repositories {
  jcenter()
  mavenCentral()
}

sourceSets {
  main {
    java { srcDirs = [] }
    groovy { srcDirs += ['src'] }
  }
}

dependencies {
  // Groovy - used to compile Groovy projects.  This is what allows IntelliJ to provide groovy code completion & introspection
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.6'

  // Common lib for logging
  // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'

  // Common lib for logging
  // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.26'

  // Websocket library used to communicate with the UI
  compile group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.4.0'

  // YAML parser used for reading config files
  // https://mvnrepository.com/artifact/org.yaml/snakeyaml
  compile group: 'org.yaml', name: 'snakeyaml', version: '1.24'

  // Include all jar files in 'lib' automatically
  compile fileTree(dir: 'lib', include: ['**/*.jar'])
}

task downloadProcessingVideoLibrary() {
  doLast {
    download {
      println "Downloading processing video library"
      src 'https://github.com/processing/processing-video/releases/download/r5-v2.0-beta3/video-2.0-beta3.zip'
      dest new File("${rootDir}/tmp", 'processing-video-lib-v2-beta-release-5.zip')
      onlyIfModified true
    }
  }
}

task unzipProcessingVideoLibrary(dependsOn: downloadProcessingVideoLibrary) {
  doLast {
    copy {
      println "Unzipping processing video library"
      from zipTree("${rootDir}/tmp/processing-video-lib-v2-beta-release-5.zip")
      into "${rootDir}/lib"
    }
  }
}

task downloadProcessingUdpLibrary() {
  doLast {
    download {
      println "Downloading processing udp library"
      src 'http://ubaa.net/shared/processing/udp/udp.zip'
      dest new File("${rootDir}/tmp", 'udp.zip')
      onlyIfModified true
    }
  }
}

task unzipProcessingUdpLibrary(dependsOn: downloadProcessingUdpLibrary) {
  doLast {
    copy {
      println "Unzipping processing udp library"
      from zipTree("${rootDir}/tmp/udp.zip")
      into "${rootDir}/lib"
    }
  }
}

task downloadProcessingCoreLibrary() {
  doLast {
    download {
      println "Downloading processing core library"
      src 'http://download.processing.org/processing-3.5.3-linux64.tgz'
      dest new File("${rootDir}/tmp", 'processing-3.5.3-linux64.tgz')
      onlyIfModified true
    }
  }
}

task untarProcessingCoreLibrary(dependsOn: downloadProcessingCoreLibrary) {
  doLast {
    copy {
      println "Untarring processing core library"
      from tarTree("${rootDir}/tmp/processing-3.5.3-linux64.tgz")
      into "${rootDir}/tmp"
    }

    copy {
      from("${rootDir}/tmp/processing-3.5.3/core/library/core.jar")
      into("${rootDir}/lib/processing-core")
    }

    delete "${rootDir}/tmp/processing-3.5.3"
  }
}

task downloadJoglJar() {
  doLast {
    download {
      println "Downloading jogl jar"
      src 'https://public-deps.s3-us-west-2.amazonaws.com/jogamp-2.3.2-patched.jar'
      dest new File("${rootDir}/lib/jogl-2.3.2-patched", 'jogamp-2.3.2-patched.jar')
      onlyIfModified true
    }
  }
}

// To do this, I googled 'gradle build fat jar' and copied this from the first link (with a couple modifications)
// https://www.baeldung.com/gradle-fat-jar
task fatJar(type: Jar) {
  manifest {
    attributes 'Main-Class': 'app.TesseractMain'
  }
  baseName = 'TesseractFatJar'
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}
